import os
import requests
from qdrant_client import QdrantClient
import requests
from dotenv import load_dotenv
import logging
import openai


# Config
AI_DEVS_API_KEY = ""
OPENAI_API_KEY = ""
URL = "https://zadania.aidevs.pl"
qdrant_client = QdrantClient(host='localhost', port=6333)
collection_name = 'unknownNews'

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
openai.api_key = OPENAI_API_KEY

def debug_print(req_type, url, status, body):
    print(f"{req_type} to {url} - Status: {status}, Body: {body}")

def get_token(task):
    url = f"{URL}/token/{task}"
    response = requests.post(url, json={"apikey": AI_DEVS_API_KEY})
    response.raise_for_status()
    debug_print("POST", url, response.status_code, response.json())
    return response.json()["token"]


def get_input(token):
    response = requests.get(f"{URL}/task/{token}")
    response.raise_for_status()
    print(f"REQUEST to {URL}/task/{token} with METHOD GET")
    print(f"RESPONSE STATUS: {response.status_code}, BODY: {response.json()}")

    return response.json()


def submit(token, answer):
    response = requests.post(f"{URL}/answer/{token}", json={"answer": answer})
    print(f"REQUEST to {URL}/answer/{token} with METHOD POST and BODY: {{'answer': {answer}}}")
    print(f"RESPONSE STATUS: {response.status_code}, BODY: {response.json()}")
    response.raise_for_status()
    return response.json()


def search_in_qdrant(query_vector):
    # Adjusted call to match expected parameters of the QdrantClient search method
    search_results = qdrant_client.search(
        collection_name=collection_name,
        query_vector=query_vector,
        limit=1  # Adjusted parameter name from 'top' to 'limit'
    )
    print(f"Search results: {search_results}")
    return search_results


def get_vector_from_text(text):
    response = openai.Embedding.create(
        model="text-embedding-ada-002",
        input=text
    )
    # Extracting the first embedding vector
    vector = response['data'][0]['embedding']
    return vector


# Main
def main():
    
    token = get_token("search")
    question_data = get_input(token)
    question = question_data['question']

    # Convert the question to a vector (this step is missing in your original code)
    print (f'question')
    question_vector = get_vector_from_text(question)

    # Search w Qdrant
    results = search_in_qdrant(question_vector)

    #  URL z Qdrant
    if results and len(results) > 0:
        first_hit = results[0]  # Get the first result
        url = first_hit.payload['metadata']['url']  # Extract URL from the first result's payload

        if url:
            print(f"Odpowiedź: {url}")
            result = submit(token, url)
            print(f"Wynik przesłania odpowiedzi: {result}")
        else:
            print("Nie znaleziono odpowiedzi.")
    else:
        print("Nie znaleziono odpowiedzi.")

if __name__ == "__main__":
    main()





import os
import json
import pandas as pd
import re
from qdrant_client import QdrantClient
import requests
from dotenv import load_dotenv
import logging
import openai


# Konfiguracja
AI_DEVS_API_KEY = ""
OPENAI_API_KEY = ""
URL = "https://zadania.aidevs.pl"
qdrant_client = QdrantClient(host='localhost', port=6333)
collection_name = 'people'

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
openai.api_key = OPENAI_API_KEY

def debug_print(req_type, url, status, body):
    print(f"{req_type} to {url} - Status: {status}, Body: {body}")

def get_token(task):
    url = f"{URL}/token/{task}"
    response = requests.post(url, json={"apikey": AI_DEVS_API_KEY})
    response.raise_for_status()
    debug_print("POST", url, response.status_code, response.json())
    return response.json()["token"]


def get_input(token):
    response = requests.get(f"{URL}/task/{token}")
    response.raise_for_status()
    print(f"REQUEST to {URL}/task/{token} with METHOD GET")
    print(f"RESPONSE STATUS: {response.status_code}, BODY: {response.json()}")

    return response.json()


def submit(token, answer):
    response = requests.post(f"{URL}/answer/{token}", json={"answer": answer})
    print(f"REQUEST to {URL}/answer/{token} with METHOD POST and BODY: {{'answer': {answer}}}")
    print(f"RESPONSE STATUS: {response.status_code}, BODY: {response.json()}")
    response.raise_for_status()
    return response.json()


def search_in_qdrant(query_vector):
    search_results = qdrant_client.search(
        collection_name=collection_name,
        query_vector=query_vector,
        limit=1
    )
    print(f"Search results: {search_results}")
    return search_results


def get_vector_from_text(text):
    response = openai.Embedding.create(
        model="text-embedding-ada-002",
        input=text
    )
    # Extracting the first embedding vector
    vector = response['data'][0]['embedding']
    return vector

def get_answer_from_openai(question, info):
    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        'Authorization': f'Bearer {OPENAI_API_KEY}',
        'Content-Type': 'application/json'
    }
    data = {
        "model": "gpt-4",
        "temperature": 0.1,
        "messages": [
            {
                "role": "system",
                "content": f"wskazówka do pytanie podana jest przez użytkownika: {question}"
            },
            {
                "role": "user",
                "content": info
            }
        ]
    }

    print(f"Data sent to OpenAI: {json.dumps(data, indent=4)}")  # Dodajemy debugowanie danych wysyłanych

    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200:
        debug_print("POST", url, response.status_code, response.json())
        print("Response from OpenAI:", response.json())  # Dodajemy debugowanie odpowiedzi otrzymanej
        return response.json()['choices'][0]['message']['content'].strip()
    else:
        debug_print("POST", url, response.status_code, response.text)
        raise Exception(f"Error in OpenAI API call: {response.status_code} {response.text}")




def check_for_keywords(question, metadata):
    # Upewniamy się, że funkcja sprawdza każde słowo kluczowe i zwraca wartość metadanej, jeśli pasuje
    for keyword in ['kolor', 'film', 'info', 'postac', 'serial']:
        if keyword in question.lower():
            # Jeśli znajdziemy dopasowanie słowa kluczowego, zwracamy wartość metadanej bezpośrednio
            return metadata.get(keyword)
    # Jeśli żadne słowo kluczowe nie pasuje, zwracamy None, aby sygnalizować konieczność użycia OpenAI
    return None

def main():
    token = get_token("people")
    question_data = get_input(token)
    question = question_data['question']

    print('Question:', question)
    question_vector = get_vector_from_text(question)

    # Wyszukiwanie w Qdrant
    search_results = search_in_qdrant(question_vector)
    print(search_results)
    
    answer = "Nie znaleziono odpowiednich informacji w bazie danych."  # Zdefiniuj 'answer' na tym poziomie
    
    if search_results and len(search_results) > 0:
        first_result = search_results[0]
        metadata = first_result.payload['metadata']
        
        keyword_answer = check_for_keywords(question, metadata)
        if keyword_answer:
            print('Keyword answer:', keyword_answer)
            answer = keyword_answer  # Uaktualnij 'answer' z wartością słowa kluczowego
        else:
            # Jeśli nie znaleziono kluczowego słowa, wykorzystaj OpenAI do uzyskania odpowiedzi
            info = metadata.get('info', 'Brak informacji')
            answer = get_answer_from_openai(question, info)  # Uaktualnij 'answer' z odpowiedzią z OpenAI
            print('Answer from OpenAI:', answer)
    else:
        print("Nie znaleziono odpowiednich informacji w bazie danych.")

    # Przesyłanie odpowiedzi - teraz tylko jedno wywołanie 'submit' na końcu funkcji
    submit_result = submit(token, answer)
    print(f"Submit result: {submit_result}")

if __name__ == "__main__":
    main()




